<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://WindChimes1993.github.io</id>
    <title>CPlusPlus</title>
    <updated>2021-08-08T06:51:30.590Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://WindChimes1993.github.io"/>
    <link rel="self" href="https://WindChimes1993.github.io/atom.xml"/>
    <subtitle>为了自己爱的人，勇往直前吧。</subtitle>
    <logo>https://WindChimes1993.github.io/images/avatar.png</logo>
    <icon>https://WindChimes1993.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, CPlusPlus</rights>
    <entry>
        <title type="html"><![CDATA[STL深入学习 vector篇 （一）]]></title>
        <id>https://WindChimes1993.github.io/post/stl-shen-ru-xue-xi-vector-pian-yi/</id>
        <link href="https://WindChimes1993.github.io/post/stl-shen-ru-xue-xi-vector-pian-yi/">
        </link>
        <updated>2021-08-08T05:26:45.000Z</updated>
        <content type="html"><![CDATA[<p>我们先看一段代码：</p>
<p>#include <iostream></p>
<p>using namespace std;</p>
<p>#include <vector></p>
<p>class Student<br>
{<br>
public:<br>
Student(int nID)<br>
{<br>
std::cout &lt;&lt; &quot;Student construction...&quot; &lt;&lt; std::endl;<br>
m_nID = nID;<br>
m_pID = new int(nID);<br>
}</p>
<pre><code>~Student()
{
	std::cout &lt;&lt; &quot;Student destruction...&quot; &lt;&lt; std::endl;
	delete m_pID;
	m_pID = nullptr;
}
</code></pre>
<p>private:<br>
int m_nID;<br>
int *m_pID{nullptr};<br>
};</p>
<p>int main(int argc, char** argv)<br>
{<br>
Student stu1(1), stu2(2), stu3(3), stu4(4), stu5(5), stu6(6), stu7(7), stu8(8), stu9(9), stu10(10);<br>
std::vector<Student> vecStudent;<br>
vecStudent.push_back(stu1);<br>
vecStudent.push_back(stu2);<br>
vecStudent.push_back(stu3);<br>
vecStudent.push_back(stu4);<br>
vecStudent.push_back(stu5);<br>
vecStudent.push_back(stu6);<br>
vecStudent.push_back(stu7);<br>
vecStudent.push_back(stu8);<br>
vecStudent.push_back(stu9);<br>
vecStudent.push_back(stu10);</p>
<pre><code>getchar();

return 0;
</code></pre>
<p>}</p>
<p>以下这段代码如何输出？</p>
<p>好了，下面公布答案：<br>
<img src="https://WindChimes1993.github.io/post-images/1628403687967.PNG" alt="" loading="lazy"><br>
很奇怪对不对，崩在了第20行，也就是调用了析构函数，为什么会出现这种情况呢，分析源代码看看。<br>
void push_back()<br>
{<br>
if (_M_finish != _M_end_of_storage) {<br>
construct(_M_finish);<br>
++_M_finish;<br>
}<br>
else<br>
_M_insert_aux(end());<br>
}<br>
注: m_start 是array的首地址，_M_finish 是你存放进去的最后一个元素的下一个地址，_M_end_of_storage array的尾地址</p>
<p>这里分析得知，如果还有空间，直接构造一个出来；如果空间不够了，就在尾部插入一个元素；接着看<br>
void _M_insert_aux(iterator __position, bool __x)<br>
{<br>
if (_M_finish._M_p != _M_end_of_storage)<br>
{<br>
copy_backward(__position, _M_finish, _M_finish + 1);<br>
<em>__position = __x;<br>
++_M_finish;<br>
}<br>
else<br>
{<br>
size_type __len = size() ? 2 * size() : __WORD_BIT;<br>
unsigned int</em> __q = _M_bit_alloc(__len);<br>
iterator __i = copy(begin(), __position, iterator(__q, 0));<br>
*__i++ = __x;<br>
_M_finish = copy(__position, end(), __i);<br>
_M_deallocate();<br>
_M_end_of_storage = __q + (__len + __WORD_BIT - 1)/__WORD_BIT;<br>
_M_start = iterator(__q, 0);<br>
}<br>
}<br>
看else这一段，内存空间不够，会先调用copy，将元素复制到新空间里面去；接下来调用_M_deallocate，将已有的元素空间释放掉。<br>
其实这里已经能显示问题了，由于我们没有写构造函数，这里就调用了默认构造函数，默认构造函数只是一个浅拷贝，所以copy的时候只是把指针的地址拷过去了；最后vector逐一调用析构函数，这个地址变成了一个野指针，当下次空间不够，又要析构的时候，就会析构到这个野指针，从而导致程序崩溃。我们加一个自定义的深拷贝试一下。</p>
<p>Student(const Student&amp; stu)<br>
{<br>
m_nID = stu.m_nID;<br>
m_pID = new int(*stu.m_pID);<br>
}</p>
<p>再次运行：<br>
<img src="https://WindChimes1993.github.io/post-images/1628405380197.PNG" alt="" loading="lazy"><br>
可以看到已经没有崩溃了。</p>
<p>当然这里需要大家了解vector的迭代器，以及copy这个函数，这里就不多介绍了。</p>
]]></content>
    </entry>
</feed>